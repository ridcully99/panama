#summary The Documentation.
#labels Featured

= Table of Contents =

<wiki:toc max_depth="2" />

= Introduction =

== Philosophy ==

The goal of Panama is, to make it easy to create web applications with Java. Panama tries not to hide the mechanics of a web-server. There are no secrets and no magic. Panama aims to be as simple as possible in itself and to make it as simple and easy as possible to create web applications. Therefore if comes with "some batteries included": There's Velocity for the templates and there's Avaje Ebean ORM as a database layer, both of which tightly integrated.

== General approach ==

Panama consists of a Dispatcher which is implemented as a Filter and Controller classes (written by you) providing Action methods. Every request sent to a Panama application contains the name (or alias) of a Controller and an Action. The Dispatcher parses the request and invokes the action. Every action returns a Target which mosten times is a Velocity template to be rendered but can also be another Action to be invoked or a redirect or a JSON result etc.

Panama uses the "open session in view" pattern for database connections, which means that the database-session is still open while the template is rendered. This way, your application can make great use of lazy loading (see the Tree example for a very impressive example how little code is needed this way).

----

= Main Coding Parts =

This section describes the coding part of your web application (in contrast to the template part, which is described below). There are four main parts you will need to know. 

== Controllers ==

Controllers are classes that provide a set of action methods. Which and how many actions you put in one controller is up to you, but normally you’d put actions together that a logically connected (like create, update, delete and list for some entity type). A simple rule of thumb could be to put all actions in one controller that should share the same URL prefix. 

To be recognized as a controller by Panama, a class must be derived from the `BaseController` class and must be annotated with the `@Controller` annotation. This annotation has an optional `alias` property that allows you to give your controller class a nice short name, which can also be used in the URL. If you do not provide an alias, you have to specify the fully qualified class name of your controller in the URL (which might look a bit odd). Note, that even if your controller has an alias, you can also use the fully qualified class name instead. 

== Actions ==

Actions are methods of a controller class. To be recognized as an action by Panama, a method must have the signature `public Target actionName()` and must be annotated with the `@Action` annotation. This annotation has an optional `alias` property that allows you to give your action a name that differs from the method name.

=== Default Action ===

Per Controller you may specify one of the actions to be the default action. The default action will be invoked if an URL only specifies a controller but no action. You specify the name of the default action using the optional `defaultAction` attribute of the `@Controller` annotation.

*Caution:* The aliases for controllers and actions must not contain any slashes (/). Aliases containing slashes are ignored and a warning is logged at startup. The controllers resp. actions can still be accessed via their real name (FQCN for controllers, method name for the actions).

==Context==

For each and every request, the system creates an initializes a thread-local instance of the `Context` class, which provides you with all you’ll need in your actions:

  * current request
  * current response
  * current session
  * access to application scope
  * access to all request parameters
  * the locale preferred by the current user
  * localized strings
  * token support
  * easy ways to put values into request-, session- and application scope for use in templates
  * ...

There are two ways for you, to get access to the current context:

  * From within controller classes, i.e. when you’re writing your action methods, you can use the `context` member variable, which is provided by the `BaseController` class and is automatically initialized with the current context (even if you create a controller instance yourself).

  * Outside of controller classes - e.g. in some helper class - you can use the static method `Context.getInstance()` to get your `Context` instance for the current request.

=== One `Context` instance per request ===

Note, that for each request there is _exactly one instance_ of the `Context` class. All controllers created and all calls to `Context.getInstance()` during one request will always return the same object. This is quite useful, as anything you put into context at some place will also be there everywhere else, so there is no need to pass a lot of objects around. Very importantly, even during render-time in your Velocity templates you’ll have the same context instance at your disposal as `$context`.

Note that for your convinience everything you put into context with `context.put()` is directly available in the template by it’s key, without need for `$context`. That means, if you do `context.put(“foo”, “bar”)` in your action, the value is directly available as variable `$foo` in your template (`$context.foo` is possible too).

So if you put something into the context in your action class like so: 
{{{
context.put("foo", "bar")
context.session.put("answer", 42)
context.application.put("list", new ArrayList<String>())
}}}

you can access it in your template like so:

{{{
$foo
$context.foo
$context.session.answer
$context.application.list
}}}

*Caution:* Panama automatically puts the controller object itself into the `context` by it's FQCN and it's alias if one is specified. So instead of putting stuff into the context you also can provide public methods in your controller and invoke them from within your templates. Thus, make sure you do not give your controller an alias name that matches any of the velocity tools you intend to use in templates rendered by that controller, because putting the controller object into request context using that alias would "shadow" the tool.

== Targets ==

Targets are objects returned by Actions and tell Panama what to do next. Most of the time the `TemplateTarget` will be used,  but there’s also `RedirectTarget`, `PlainTextTarget` and even `JSONTarget (useful for responding to AJAX requests). And you can easily provide your own Targets as well, just extend the abstract `Target` class and implement the `go()` method.

----

= Templates =

Panama uses [http://velocity.apache.org Apache Velocity] for it’s templates. Velocity is fully integrated with Panama, no entry in _web.xml_ is required.

The configuration of Velocity is done via `velocity.properties` in the _src_ root directory. A minimal version would look something like this:

{{{
resource.loader = class
class.resource.loader.class = org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
runtime.log.logsystem.class=panama.util.SimpleLogChute
input.encoding = UTF-8
output.encoding = UTF-8
}}}

Please see the `velocity.properties` of the _panama-examples_ project for more options and explanations and of course the [http://velocity.apache.org/engine/releases/velocity-1.6/developer-guide.html#Velocity_Configuration_Keys_and_Values official documentation].

== Pre-Set Variables ==

There are a bunch of preset variables available for use in your templates:

===`$context`===

This is the `Context` object you also have in your controller (see above). 

===`$request`, `$response`===

Access to the request and response objects.

===`$<controller-FQCN>` and `$<controller-alias>` ===
 
Panama automatically puts the controller instance of the executed action into the context by it’s fully qualified class name, as well as by it’s alias name (if any is set in the @Controller annotation). In both cases, each dot in the name is replaced by an underscore, as dots are understood by velocity as a separation of objects. So the `GuestbookController` from the _panama-examples_ project is available via `$panama_examples_guestbook_GuestbookController` as well as via `$guestbook`.

== Tools ==

Tools are a powerful feature of Velocity as described [http://velocity.apache.org/tools/devel/ here].

=== Default-Tools===

Panama has [http://velocity.apache.org/tools/releases/2.0/ VelocityTools 2.0] included. All its [http://velocity.apache.org/tools/releases/2.0/generic.html GenericTools] and [http://velocity.apache.org/tools/releases/2.0/view.html VelocityView Tools] are automatically available for use in the templates. They are available via their default names.

  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/MathTool.html $math]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/FieldTool.html $field]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/ResourceTool.html $text]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/AlternatorTool.html $alternator]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/SortTool.html $sorter]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/EscapeTool.html $esc]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/ConversionTool.html $convert]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/ClassTool.html $class]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/XmlTool.html $xml]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/NumberTool.html $number]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/DisplayTool.html $display]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/DateTool.html $date]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/LoopTool.html $loop]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/generic/RenderTool.html $render]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/BrowserTool.html $browser]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/PagerTool.html $pager]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/LinkTool.html $link]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/ImportTool.html $import]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/ParameterTool.html $params]
  * [http://velocity.apache.org/tools/releases/2.0/javadoc/org/apache/velocity/tools/view/CookieTool.html $cookies]

Additionally the following Panama tools are also automatically available:

  * [#Tiles $tiles]
  * [http://wiki.apache.org/velocity/NullTool $null] (this tool is taken from Velocity Wiki)

===Your own Tools===

You can also provide your own Velocity tools. To do so, create your tool classes and `tools.xml` file as explained here. Place your `tools.xml` file in your _src_ root directory. See the _panama-examples_ for an example.

===Overwriting===

Note, that you can overwrite the tools with your own stuff, using #set(). <br>
Hint: If you need e.g. a variable `$xml` and still want to use the `$xml` tool, just assign the tool to another variable in your template:

{{{
#set($xmltool = $xml)
#set($xml = 'foo')
}}}

Note, that overwriting only takes place within your template. You do not remove or delete the tool itself and it can still be accessed by it’s default name in other templates.

----

= Configuration =

== Panama ==

Panama does not require any configuration to work. However there are a few optional parameters, which can be set as init-parameters for the filter declaration in _web.xml_.

|| param-name         || param-value || Explanation ||
|| `panama.languages` || `en,de,fr` || A comma separated list of languages your application supports.<br>See chapter [#Internationalization] for details. ||
|| `panama.maxfileuploadsize` || `16` || The maximum file upload size in MByte. The default values is 1 MByte. ||

== !SimpleLog ==

SimpleLog requires a `simplelog.properties` file in the _src_ root directory. Actually the file may even be empty, but please see the [http://code.google.com/p/panama/source/browse/trunk/panama-kickstart/src/simplelog.properties simplelog.properties] file from _panama-kickstart_, which contains a good documentation in form of comments.

== Avaje Ebean ORM ==

If you're using the integrated Persistence layer based on Avaje Ebean ORM, you'll have to provide an `ebean.properties` file in the _src_ root directory. Please see the chapter about [#Persistence] and http://www.avaje.org for further information.

== Custom ==

If you need some configuration of your own, Panama has limited support for that, in that you can add your own custom init-parameters to the filter declaration in _web.xml_ and access them via `context.getCore().getInitParam(key)` from within your controller classes. If that is not enough for your needs you'll have to come up with something by your own ([CustomConfigurationHowTo Hint]).

----

= Forms =

In Panama, forms are defined using the `Form` and `Field` classes like so:
{{{
Form myForm = new Form();
myForm.addField(new StringField("firstname"));
myForm.addField(new DateField("birthday", false, "yyyy-MM-dd"));
}}}
Usually this is done within a `static` block in your controller class, as this is only a definition of the form and as long as it isn't changed during run time, only one instance is needed and can be shared by all instances of your controller.

== Fields ==

Panama provides `Field` classes for all kinds of input: There's `StringField`, `IntegerField`, `BooleanField` and even a `DateField`. Please see the [http://panama.googlecode.com/svn/trunk/panama/doc/panama/form/package-summary.html JavaDoc] for a complete list. And you can easily create and use your own `Field` classes as well, if needed.

== `FormData` == 

While a `Form` is merely a set of `Field`s, an instance of `FormData` represents one set of input data, entered into the form. `FormData` is used in two directions:

  # HTML => Java : Mapping input into a HTML form to a Java representation of the entered data
  # Java => HTML : Providing Java data in a convenient way to be used within templates

=== HTML => Java ===

Let's start with a simple HTML form for our example from above:

{{{
<form name="f" method="post" action="save">
Your name: <input type="text" name="firstname" /><br />
Your birthday: <input type="text" name="birthday" /><br />
<input type="submit" name="submit" value="Submit" />
</form> 
}}}

This will give us a simple form with two input fields and a Submit button.

Now let's implement the action to handle the input.

{{{
@Action
public Target save() {
  FormData fd = new FormData(myForm);            // 1
  fd.setInput(context.getParameterMap());        // 2
  String firstName = fd.getString("firstName");  // 3
  Date birthday = fd.getDate("birthday");        // 4
}
}}}

In line (1) we create an instance of `FormData` based on our form.

In line (2) we provide our form data with some input. Here we take all the input coming from the HTML form using a convenient method provided by `Context`.

In line (3) we fetch the first name, entered into the HTML form; nothing special here.

In line (4) we fetch the birthday, entered into the HTML form; here the input is automatically converted to a `Date` object, using the pattern we provided when creating the `DateField`. If this goes wrong, `getDate()` returns `null` and the error is remembered within our form data's `errors` structure. This is explained in depth in the section about [#Input Validation] below.

=== Java => HTML ===

TODO

== Input Validation ==

TODO

----

= Internationalization =

Externalize strings to `resources.properties` resp. `resources_<lang>.properties` files in your _src_ root directory.

== Usage in Templates ==

In your templates use the `$text` tool to write the strings:

|| `$text.hello.world`         || Hello World!              ||
|| `$text.bar`                 || The args are {0} and {1}. ||
|| `$text.bar.insert(4)`       ||  The args are 4 and {1}.  ||
|| `$text.bar.insert(4, true)` ||  The args are 4 and true. ||

== Usage in Code ==

In your code, use the `Context#getLocalizedString()` methods provided by the `Context` class:

|| `context.getLocalizedString("hello.world")`  || Hello World!             ||
|| `context.getLocalizedString("bar", 4, true)`	|| The args are 4 and true. ||

== How Panama selects the language to use ==

By default, Panama matches the user's preferred languages (as set in her browser) and the languages your application supports (see [#Configuration] below). Alternatively, you can explicitly use the `Context#putLocale()` method to set the language to use, e.g. if you allow the user to explicitly select a language in your application. The locale is stored in session scope. 

If no resources property file exists for the selected language, the standard fallback procedure to the default resources happens.

*See also* the [http://code.google.com/p/panama/source/browse/#svn%2Ftrunk%2Fpanama-examples%2Fsrc%2Fpanama%2Fexamples%2Fi18n Internationalization example] in the panama-examples project.

----

= Tiles =

Panama allows you to embed the results of other actions within your templates. This is different from the simple `#include()` or `#parse()` functionality provided by Velocity, in that it allows the reuse of business logic in different places -- in some way it’s a lightweight version of portlets.

Imagine you have a webshop and want to show the user’s current shopping cart on every page. Without tiles, you’d have to ensure in every action that everything needed for rendering the cart is provided and calculated and in every template you’d have to include another template that renders the cart.

With tiles you simply create an action that’s only responsible for the shopping cart. It might provide a list of all the user’s items and computes some total sum and shipping costs and so on and renders on to a velocity template that is not a complete HTML page, but just a snippet showing the items and costs.

Use the `$tiles` tool to embed the result of actions within your template like so:

{{{
$tiles.embed("controller", "action", {"param1":"value"})
}}}

The optional parameter map extends or the alters the original request parameters while invoking the action. Afterwards the parameters are restored to the original values.

*See also* the [http://code.google.com/p/panama/source/browse/#svn%2Ftrunk%2Fpanama-examples%2Fsrc%2Fpanama%2Fexamples%2Ftiles Tiles example] in the panama-examples project.

----

= Persistence =

== JNDI ==